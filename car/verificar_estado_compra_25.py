#!/usr/bin/env python3
"""
Script para verificar el estado de la compra 25 despu√©s de agregar items
"""

import sqlite3
import os

def verificar_estado_compra_25():
    print("üîç VERIFICANDO ESTADO DE LA COMPRA 25 DESPU√âS DE AGREGAR ITEMS")
    print("=" * 60)
    
    # Conectar a la base de datos
    db_path = "db.sqlite3"
    if not os.path.exists(db_path):
        print(f"‚ùå Error: No se encontr√≥ la base de datos en {db_path}")
        return
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # 1. VERIFICAR COMPRA 25
        print("üìä VERIFICANDO COMPRA 25...")
        
        cursor.execute("""
            SELECT id, numero_compra, proveedor, estado, total, fecha_compra, fecha_recibida
            FROM car_compra 
            WHERE id = 25
        """)
        
        compra = cursor.fetchone()
        if not compra:
            print("‚ùå No se encontr√≥ la compra 25")
            return
        
        c_id, numero, proveedor, estado, total, fecha_compra, fecha_recibida = compra
        print(f"  Compra: {numero} (ID: {c_id})")
        print(f"  Proveedor: {proveedor}")
        print(f"  Estado: {estado}")
        print(f"  Total: ${total}")
        print(f"  Fecha compra: {fecha_compra}")
        print(f"  Fecha recibida: {fecha_recibida}")
        
        # 2. VERIFICAR ITEMS DE LA COMPRA 25
        print(f"\nüì¶ VERIFICANDO ITEMS DE LA COMPRA 25...")
        
        cursor.execute("""
            SELECT ci.id, ci.compra_id, ci.repuesto_id, ci.cantidad, ci.precio_unitario, ci.subtotal, ci.recibido,
                   r.nombre, r.sku
            FROM car_compraitem ci
            LEFT JOIN car_repuesto r ON ci.repuesto_id = r.id
            WHERE ci.compra_id = 25
            ORDER BY ci.id
        """)
        
        items = cursor.fetchall()
        
        print(f"  Items encontrados: {len(items)}")
        for item in items:
            item_id, compra_id, repuesto_id, cantidad, precio, subtotal, recibido, nombre, sku = item
            print(f"    Item ID: {item_id}")
            print(f"      Compra ID: {compra_id}")
            print(f"      Repuesto ID: {repuesto_id}")
            print(f"      Repuesto: {nombre or 'N/A'}")
            print(f"      SKU: {sku or 'N/A'}")
            print(f"      Cantidad: {cantidad}")
            print(f"      Precio unitario: ${precio}")
            print(f"      Subtotal: ${subtotal}")
            print(f"      Recibido: {recibido}")
            print(f"      ---")
        
        # 3. VERIFICAR SI HAY PROCESO AUTOM√ÅTICO
        print(f"\nüîç VERIFICANDO SI HAY PROCESO AUTOM√ÅTICO...")
        
        if estado == 'recibida' and fecha_recibida:
            print(f"  ‚ùå La compra est√° en estado 'recibida'")
            print(f"  ‚ùå Fecha recibida: {fecha_recibida}")
            print(f"  üí° El sistema cambi√≥ autom√°ticamente el estado")
            print(f"  üí° Esto no deber√≠a pasar al agregar items")
        elif estado == 'borrador':
            print(f"  ‚úÖ La compra est√° en estado 'borrador'")
            print(f"  ‚úÖ Los botones de acciones deber√≠an aparecer")
        else:
            print(f"  ‚ùå Estado desconocido: {estado}")
        
        # 4. DIAGN√ìSTICO FINAL
        print(f"\nüîç DIAGN√ìSTICO FINAL...")
        
        if estado == 'recibida':
            print(f"  ‚ùå PROBLEMA IDENTIFICADO:")
            print(f"    - La compra cambi√≥ autom√°ticamente a estado 'recibida'")
            print(f"    - Esto no deber√≠a pasar al agregar items")
            print(f"    - Los botones desaparecen porque el estado cambi√≥")
            print(f"    - El flujo l√≥gico est√° roto")
            
            print(f"\n  üí° SOLUCIONES:")
            print(f"    1. Verificar si hay alg√∫n proceso autom√°tico")
            print(f"    2. Verificar si hay alg√∫n trigger en la base de datos")
            print(f"    3. Verificar si hay alg√∫n middleware que cambie el estado")
            print(f"    4. Verificar si hay alg√∫n JavaScript que cambie el estado")
        else:
            print(f"  ‚úÖ El estado es correcto: {estado}")
            print(f"  ‚úÖ Los botones deber√≠an aparecer")
        
        # Confirmar cambios
        conn.commit()
        
        print(f"\nüéâ ¬°VERIFICACI√ìN COMPLETADA!")
        print("=" * 60)
        print("üìã RESUMEN:")
        print(f"  ‚úÖ Compra 25 encontrada")
        print(f"  ‚úÖ Items en la compra 25: {len(items)}")
        print(f"  ‚úÖ Estado: {estado}")
        if estado == 'recibida':
            print(f"  ‚ùå PROBLEMA: El estado cambi√≥ autom√°ticamente")
            print(f"  üí° Necesitamos investigar por qu√© cambi√≥ el estado")
        else:
            print(f"  ‚úÖ El estado es correcto")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == "__main__":
    verificar_estado_compra_25()



