#!/bin/bash
# convertir_maxgonpe_admin.sh - Convierte a maxgonpe en administrador en Docker
# Uso: ./convertir_maxgonpe_admin.sh

CONTAINER_NAME="cliente_solutioncar"

echo "üëë Convirtiendo a maxgonpe en administrador del taller..."

# Verificar que el contenedor existe
if ! docker ps -a --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
    echo "‚ùå Error: El contenedor '$CONTAINER_NAME' no existe"
    echo "   Contenedores disponibles:"
    docker ps -a --format "table {{.Names}}\t{{.Status}}"
    exit 1
fi

# Verificar que el contenedor est√° corriendo
if ! docker ps --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
    echo "‚ö†Ô∏è  El contenedor no est√° corriendo. Iniciando..."
    docker start $CONTAINER_NAME
    sleep 3
fi

echo "üîß Ejecutando comandos en el contenedor..."

# Ejecutar comandos Django en el contenedor
docker exec $CONTAINER_NAME python manage.py shell -c "
from django.contrib.auth.models import User
from car.models import Mecanico

print('üë• Buscando usuario maxgonpe...')

try:
    # Buscar a maxgonpe
    maxgonpe = User.objects.get(username='maxgonpe')
    print(f'‚úÖ Usuario encontrado: {maxgonpe.username}')
    
    # Verificar si ya tiene perfil
    if hasattr(maxgonpe, 'mecanico'):
        # Actualizar a administrador
        maxgonpe.mecanico.rol = 'admin'
        maxgonpe.mecanico.especialidad = 'Administrador del Sistema'
        maxgonpe.mecanico.save()
        print(f'‚úÖ {maxgonpe.username} actualizado a ADMINISTRADOR')
    else:
        # Crear perfil de administrador
        mecanico = Mecanico.objects.create(
            user=maxgonpe,
            rol='admin',
            especialidad='Administrador del Sistema'
        )
        print(f'‚úÖ Perfil de administrador creado para {maxgonpe.username}')
    
    # Verificar permisos
    print(f'\\nüîê Permisos de {maxgonpe.username}:')
    print(f'  - Diagn√≥sticos: {maxgonpe.mecanico.puede_ver_diagnosticos}')
    print(f'  - Trabajos: {maxgonpe.mecanico.puede_ver_trabajos}')
    print(f'  - POS: {maxgonpe.mecanico.puede_ver_pos}')
    print(f'  - Compras: {maxgonpe.mecanico.puede_ver_compras}')
    print(f'  - Inventario: {maxgonpe.mecanico.puede_ver_inventario}')
    print(f'  - Administraci√≥n: {maxgonpe.mecanico.puede_ver_administracion}')
    print(f'  - Gestionar usuarios: {maxgonpe.mecanico.gestionar_usuarios}')
    
    print(f'\\nüéØ maxgonpe ahora puede entrar como:')
    print(f'   Usuario: {maxgonpe.username}')
    print(f'   Contrase√±a: celsa')
    print(f'   Rol: {maxgonpe.mecanico.get_rol_display()}')
    
    # Tambi√©n verificar si camilo existe y mostrar su estado
    try:
        camilo = User.objects.get(username='camilo')
        if hasattr(camilo, 'mecanico'):
            print(f'\\nüë§ Estado de Camilo:')
            print(f'   Usuario: {camilo.username}')
            print(f'   Rol: {camilo.mecanico.get_rol_display()}')
            print(f'   Admin: {camilo.mecanico.puede_ver_administracion}')
        else:
            print(f'\\nüë§ Camilo no tiene perfil de mec√°nico')
    except User.DoesNotExist:
        print(f'\\nüë§ Usuario camilo no encontrado')
    
except User.DoesNotExist:
    print('‚ùå Usuario maxgonpe no encontrado')
    print('üë• Usuarios disponibles:')
    for u in User.objects.all():
        print(f'  - {u.username}')
except Exception as e:
    print(f'‚ùå Error: {e}')
"

echo ""
echo "‚úÖ ¬°Conversi√≥n completada!"
echo "üëë maxgonpe ahora es administrador del taller"
echo ""
echo "üåê Accede a tu aplicaci√≥n para ver los cambios:"
echo "   - Login: maxgonpe / celsa"
echo "   - Ver√°s: Gesti√≥n de Usuarios en el panel"
echo "   - Podr√°s: Crear usuarios, cambiar roles, gestionar permisos"
echo "   - Podr√°s: Autorizar a Camilo como administrador"








